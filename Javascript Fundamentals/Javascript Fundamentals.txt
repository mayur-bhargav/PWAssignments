Question 1) Write a JavaScript function called outerFunction that takes a parameter and returns an inner function.
The inner function should access both the parameter of outerFunction and a variable declared within
outerFunction. Demonstrate how lexical scoping allows the inner function to maintain access to these
variables even after outerFunction has finished executing.

Solution 1)

function outerFunction(outerParam) {
    let outerVar = 'I am an outer variable!';
    function innerFunction() {
        console.log(`Outer Parameter: ${outerParam}`);
        console.log(`Outer Variable: ${outerVar}`);
    }
    return innerFunction;
}
let example = outerFunction('I am an outer parameter!');
example();

Question 2) Create a JavaScript program that demonstrates the basic usage of regular expressions. Write a function
that takes a regex pattern and a string as input and returns true if there is a match, and false otherwise. Test
the function with various patterns and strings.

Solution 2) 

function testRegex(pattern, string) {
    return pattern.test(string);
}
console.log(testRegex(/hello/, 'hello world'));
console.log(testRegex(/^hello$/, 'hello world'));
console.log(testRegex(/\d+/, 'There are 3 apples'));
console.log(testRegex(/\bword\b/, 'A word in a sentence'));
console.log(testRegex(/[A-Z]/, 'all lowercase'));

Question 3) Write a JavaScript program that demonstrates the use of character classes in regular expressions.
Create a function that searches for specific character classes in a given string and returns the matches. Test
the function with patterns for digits, uppercase letters, lowercase letters, and special characters.

Solution 3) 

function findCharacterClassMatches(pattern, string) {
    let matches = string.match(pattern);
    return matches ? matches : 'No matches found';
}

console.log(findCharacterClassMatches(/\d/g, 'There are 3 apples and 25 oranges.'));

console.log(findCharacterClassMatches(/[A-Z]/g, 'Hello World!'));

console.log(findCharacterClassMatches(/[a-z]/g, 'Hello World!'));


console.log(findCharacterClassMatches(/\W/g, 'Email@Example.com!'));

console.log(findCharacterClassMatches(/\s/g, 'Hello World! This is a test.'));

Question 4) Create a JavaScript program that takes a regex pattern and a string as input. Write a function that not
only checks if there is a match but also extracts specific parts of the matched text using groups. Test the
function with patterns that include groups to capture different parts of a date (e.g., day, month, and year)
from a given string.

Solution 4) 

function extractDateParts(pattern, string) {
    const match = string.match(pattern);
    if (match) {
        const day = match[1];
        const month = match[2];
        const year = match[3];
        return { day, month, year };
    } else {
        return 'No date found';
    }
}
const datePattern = /(\d{2})\/(\d{2})\/(\d{4})/;
const dateString = 'Today is 15/04/2021.';

console.log(extractDateParts(datePattern, dateString));


Question 5) You are building a shipping application. Write a program that takes the type of package ("standard",
"express", or "overnight") and uses a switch statement to calculate and print the estimated delivery time
based on the package type. For example, "standard" might take 3-5 days, "express" 1-2 days, and
"overnight" would be delivered the next day.

Solution 5) 

function calculateDeliveryTime(packageType) {
    let deliveryTime;

    switch (packageType.toLowerCase()) {
        case "standard":
            deliveryTime = "3-5 days";
            break;
        case "express":
            deliveryTime = "1-2 days";
            break;
        case "overnight":
            deliveryTime = "next day";
            break;
        default:
            deliveryTime = "Invalid package type";
            break;
    }
    return `The estimated delivery time for ${packageType} package is: ${deliveryTime}.`;
}
console.log(calculateDeliveryTime("standard"));
console.log(calculateDeliveryTime("express"));
console.log(calculateDeliveryTime("overnight"));
console.log(calculateDeliveryTime("economy"));
