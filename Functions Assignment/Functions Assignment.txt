Question 1) Create an arrow function called square that takes a number as an argument and returns its square. Use
the arrow function to calculate the square of a given number and display the result.

solution 1)

const square = (number) => number * number;
const number = 5;
const result = square(number);
console.log(`The square of ${number} is ${result}.`);


Question 2) Create a JavaScript function called generateGreeting that takes a name as an argument and returns a
personalized greeting message. Use this function to greet three different people.

Solution 2)

function generateGreeting(name) {
    return `Hello, ${name}!`;
}
console.log(generateGreeting('Alice'));
console.log(generateGreeting('Bob'));
console.log(generateGreeting('Charlie'));

Question 3) Create an IIFE (Immediately Invoked Function Expression) that calculates the square of a number and
immediately displays the result.

Solution 3)

(function(number) {
    const result = number * number;
    console.log(`The square of ${number} is ${result}.`);
})(5);


Question 4) Write a JavaScript function called calculateTax that takes an income as an argument and returns the
amount of tax to be paid. Use a closure to handle different tax rates based on income ranges. Test the
function with various incomes.

Solution 4) 

function createTaxCalculator() {
    function calculateTax(income) {
        let taxRate;
        if (income <= 10000) {
            taxRate = 0.1;
        } else if (income <= 30000) {
            taxRate = 0.2;
        } else {
            taxRate = 0.3;
        }
        return income * taxRate;
    }
    return calculateTax;
}
const calculateTax = createTaxCalculator();
console.log(calculateTax(5000));
console.log(calculateTax(15000)); 
console.log(calculateTax(45000));

Question 5) Write a JavaScript function called factorial that calculates the factorial of a non-negative integer using
recursion. Test the function with different inputs.

Solution 5) 

function factorial(n) {
    if (n === 0 || n === 1) {
        return 1;
    }
    return n * factorial(n - 1);
}
console.log(factorial(0));
console.log(factorial(1));
console.log(factorial(5));
console.log(factorial(10));

Question 6) Write a JavaScript function called curry that takes a function as an argument and returns a curried
version of that function. The curried function should accept arguments one at a time and return a new
function until all arguments are provided. Then, it should execute the original function with all arguments.
Test the curry function with a function that adds two numbers.

Solution 6) 

function curry(func) {
    return function curried(...args) {
        if (args.length >= func.length) {
            return func.apply(this, args);
        } else {
            return function(...args2) {
                return curried.apply(this, args.concat(args2));
            }
        }
    };
}
function add(a, b) {
    return a + b;
}
const curriedAdd = curry(add);
console.log(curriedAdd(1)(2));