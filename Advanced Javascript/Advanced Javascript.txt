Question 1) Create an object constructor Person that takes name and age as parameters and initializes them. Also, add a method sayHello to greet the person.

Solution 1) 

function Person(name, age) {
    this.name = name;
    this.age = age;
    this.sayHello = function() {
        console.log(`Hello! My name is ${this.name} and I am ${this.age} years old.`);
    };
}
const person1 = new Person('Alice', 30);
person1.sayHello();

const person2 = new Person('Bob', 25);
person2.sayHello(); 

Questions 2) Create a constructor Employee that inherits from the Person constructor of problem 1. Add an additional
property designation and a method getDetails to display the employee details.

Solution 2)

function Person(name, age) {
    this.name = name;
    this.age = age;
}

Person.prototype.sayHello = function() {
    console.log(`Hello! My name is ${this.name} and I am ${this.age} years old.`);
};
function Employee(name, age, designation) {
    Person.call(this, name, age);
    this.designation = designation;
}
Employee.prototype = Object.create(Person.prototype);
Employee.prototype.constructor = Employee;
Employee.prototype.getDetails = function() {
    console.log(`Name: ${this.name}, Age: ${this.age}, Designation: ${this.designation}`);
};
const employee1 = new Employee('John', 28, 'Software Developer');
employee1.sayHello();
employee1.getDetails();


Question 3) Create an object Calculator with methods add, subtract, multiply, and divide. Demonstrate the usage of this
within these methods such that method chaining of add, subtract, multiply and divide is possible.

Solution 3) function Calculator() {
    this.value = 0;

    this.add = function(number) {
        this.value += number;
        return this;
    };

    this.subtract = function(number) {
        this.value -= number;
        return this;
    };

    this.multiply = function(number) {
        this.value *= number;
        return this;
    };

    this.divide = function(number) {
        if (number !== 0) {
            this.value /= number;
        } else {
            console.error('Cannot divide by zero');
        }
        return this;
    };

    this.getResult = function() {
        return this.value;
    };
}

const calculator = new Calculator();
calculator.add(10).subtract(3).multiply(5).divide(2);
console.log(calculator.getResult());

Question 4) Define a base class Shape with a method draw. Create two subclasses Circle and Rectangle that override
the draw method. Demonstrate polymorphism using instances of these classes.


Solution 4) 

class Shape {
    draw() {
        return "I am just a generic shape and don't know how to draw myself.";
    }
}
class Circle extends Shape {
    draw() {
        return "I am a Circle, and this is how I draw myself.";
    }
}
class Rectangle extends Shape {
    draw() {
        return "I am a Rectangle, and this is how I draw myself.";
    }
}
function renderShape(shape) {
    console.log(shape.draw());
}
const circle = new Circle();
const rectangle = new Rectangle();
renderShape(circle);
renderShape(rectangle);


Question 5) Create a simple polyfill for the Array.includes method by the name of customIncludes.


Solution 5) 

if (!Array.prototype.customIncludes) {
    Array.prototype.customIncludes = function(searchElement, fromIndex = 0) {
        if (fromIndex >= this.length) return false;
        if (fromIndex < 0) fromIndex = Math.max(this.length + fromIndex, 0);

        for (let i = fromIndex; i < this.length; i++) {
            if (this[i] === searchElement || (Number.isNaN(searchElement) && Number.isNaN(this[i]))) {
                return true;
            }
        }
        return false;
    };
}

const fruits = ['apple', 'banana', 'mango', 'orange'];

console.log(fruits.customIncludes('banana'));
console.log(fruits.customIncludes('grape'));
console.log(fruits.customIncludes('mango', 2));
console.log(fruits.customIncludes('apple', 3));
console.log(fruits.customIncludes(NaN));